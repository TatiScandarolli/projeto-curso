## Documentação sobre controle de versão do Git

Contexto

Este documento fornece uma visão geral para o uso básico da ferramenta sob o controle de versão do Git. Abaixo estão exemplos tanto de fluxos de trabalho de repositórios criados localmente quanto clonados de repositórios remotos.

Os pontos abordados são:
- Criar repositório e clone;
- Criar e remover branchs;
- Atualizar repositório remoto e local;
- Criar commits;
- Criar solicitação de pull requests;

## Inicializando um novo repositório

Vamos criar uma pasta de projeto da qual gostaria de criar o repositório. Primeiro fará `cd` à pasta raiz do projeto e depois executar o comando.
Para criar um novo repositório, usaremos o comando `git init`. 

1- `cd /path/to/your/existing/code`
2- `git init`

> Este é um comando utilizamos somente na configuração inicial de um novo repositório.

## Clonando um repositório existente

Após termos um projeto em um repositório central, usaremos o protocolo SSH para realizar o clone com o seguinte comando `git clone git@github.com:TatiScandarolli/test.git`

Um exemplo de URL de SHH: `git@github.com:TatiScandarolli/test.git` os valores de template são:

* HOSTNAME: github.com
* USERNAME: TatiScandarolli
* REPONAME: test

> Quando executada, a versão mais recente dos arquivos do repositório remoto na ramificação principal vai ser transferida e adicionada a uma nova pasta.

## Criando uma branch 

* É de extrema importancia antes da criação de uma branch, certificarmos que a branch principal local esteja com a versão atualizada do repositório remoto.

1- Buscar e baixar conteúdos do repositório remoto e fazer a atualização imediata ao repositório local: `git pull origin main`;
2- Criar uma branch e acessá-la: `git checkout -b "nome-da-branch"`;
3- Após realizar alterações em um ou mais arquivos, utilizar o comando `git add .`;
4- Para confirmar as alterações, pode utilizar o comando `git status`, vai exibir os arquivos alterados na cor verde.;
5- Assim podemos fazer o commit inserindo sempre um breve comentário da alteração `git commit -m "comentário de alteração aqui"`;
6- Feito isso, precisamos subir as alterações da branch local para a branch remota `git push origin nome-da-branch`.

## Abrir uma pull request

* Após o comando `git push origin nome-da-branch`, abriremos o repositório via web. 

![image](https://github.com/TatiScandarolli/projeto-curso/assets/148992172/636e0386-7e48-434b-856e-4108bbde34c2)

* Clicar em `Compare & pull request`

![image](https://github.com/TatiScandarolli/projeto-curso/assets/148992172/fb17e1a3-02bd-45a8-aefc-ab7d56843e19)

> Adicionar comentário com descrição completa do que foi realizado de alteração ou criação;
> Reviewers - Adicionar quem vai revisar;
> Assigness - Autor da pull;
> Labels - Tags sobre a pull;
> Draft pull request - Manter sempre está opção.

* Selecionar a opção `Draft pull request` e clica.
> Draft pull request, permite que notifique as pessoas que foram inseridas como "reviewers" sobre melhorias feitas em uma branch e coletar feedback.

## PR aprovada então seguiremos para o Merge

![image](https://github.com/TatiScandarolli/projeto-curso/assets/148992172/1a8c1790-4a73-4087-aa32-d6f3b6abbded)

* Selecionar a opção `Squash and merge` e clicar.
> Quando utilizamos o `Squash and merge` podemos garantir um histórico de merge mais limpo no repositório Git.

![image](https://github.com/TatiScandarolli/projeto-curso/assets/148992172/3263040a-f586-477e-8c9b-e9a9057cf339)

Finalizado, agora devemos rodar os comandos para deletar a branch local e remota.

## Deletando branch local e remota

1- Vamos rodar o comando para deletar remotamente `git push origin --delete nome-da-branch`;
2- Agora vamos mudar da branch local para main `git checkout main`;
3- Por fim, excluindo branch local `git branch -D nome-da-branch`.

Link do wiki: https://github.com/TatiScandarolli/projeto-curso/wiki